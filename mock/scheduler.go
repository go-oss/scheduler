// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	context "context"
	reflect "reflect"

	cloudtasks "cloud.google.com/go/cloudtasks/apiv2"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	tasks "google.golang.org/genproto/googleapis/cloud/tasks/v2"
)

// MockCloudTasksClient is a mock of CloudTasksClient interface.
type MockCloudTasksClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudTasksClientMockRecorder
}

// MockCloudTasksClientMockRecorder is the mock recorder for MockCloudTasksClient.
type MockCloudTasksClientMockRecorder struct {
	mock *MockCloudTasksClient
}

// NewMockCloudTasksClient creates a new mock instance.
func NewMockCloudTasksClient(ctrl *gomock.Controller) *MockCloudTasksClient {
	mock := &MockCloudTasksClient{ctrl: ctrl}
	mock.recorder = &MockCloudTasksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudTasksClient) EXPECT() *MockCloudTasksClientMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockCloudTasksClient) CreateTask(ctx context.Context, req *tasks.CreateTaskRequest, opts ...gax.CallOption) (*tasks.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTask", varargs...)
	ret0, _ := ret[0].(*tasks.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockCloudTasksClientMockRecorder) CreateTask(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockCloudTasksClient)(nil).CreateTask), varargs...)
}

// DeleteTask mocks base method.
func (m *MockCloudTasksClient) DeleteTask(ctx context.Context, req *tasks.DeleteTaskRequest, opts ...gax.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockCloudTasksClientMockRecorder) DeleteTask(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockCloudTasksClient)(nil).DeleteTask), varargs...)
}

// ListTasks mocks base method.
func (m *MockCloudTasksClient) ListTasks(ctx context.Context, req *tasks.ListTasksRequest, opts ...gax.CallOption) *cloudtasks.TaskIterator {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasks", varargs...)
	ret0, _ := ret[0].(*cloudtasks.TaskIterator)
	return ret0
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockCloudTasksClientMockRecorder) ListTasks(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockCloudTasksClient)(nil).ListTasks), varargs...)
}
