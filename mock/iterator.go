// Code generated by MockGen. DO NOT EDIT.
// Source: iterator.go

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	context "context"
	reflect "reflect"

	scheduler "github.com/go-oss/scheduler"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	iterator "google.golang.org/api/iterator"
	tasks "google.golang.org/genproto/googleapis/cloud/tasks/v2"
)

// MockTaskLister is a mock of TaskLister interface.
type MockTaskLister struct {
	ctrl     *gomock.Controller
	recorder *MockTaskListerMockRecorder
}

// MockTaskListerMockRecorder is the mock recorder for MockTaskLister.
type MockTaskListerMockRecorder struct {
	mock *MockTaskLister
}

// NewMockTaskLister creates a new mock instance.
func NewMockTaskLister(ctrl *gomock.Controller) *MockTaskLister {
	mock := &MockTaskLister{ctrl: ctrl}
	mock.recorder = &MockTaskListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskLister) EXPECT() *MockTaskListerMockRecorder {
	return m.recorder
}

// ListTasks mocks base method.
func (m *MockTaskLister) ListTasks(ctx context.Context, req *tasks.ListTasksRequest, opts ...gax.CallOption) scheduler.TaskIterator {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasks", varargs...)
	ret0, _ := ret[0].(scheduler.TaskIterator)
	return ret0
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockTaskListerMockRecorder) ListTasks(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockTaskLister)(nil).ListTasks), varargs...)
}

// MockTaskIterator is a mock of TaskIterator interface.
type MockTaskIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTaskIteratorMockRecorder
}

// MockTaskIteratorMockRecorder is the mock recorder for MockTaskIterator.
type MockTaskIteratorMockRecorder struct {
	mock *MockTaskIterator
}

// NewMockTaskIterator creates a new mock instance.
func NewMockTaskIterator(ctrl *gomock.Controller) *MockTaskIterator {
	mock := &MockTaskIterator{ctrl: ctrl}
	mock.recorder = &MockTaskIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskIterator) EXPECT() *MockTaskIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockTaskIterator) Next() (*tasks.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*tasks.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockTaskIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTaskIterator)(nil).Next))
}

// PageInfo mocks base method.
func (m *MockTaskIterator) PageInfo() *iterator.PageInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageInfo")
	ret0, _ := ret[0].(*iterator.PageInfo)
	return ret0
}

// PageInfo indicates an expected call of PageInfo.
func (mr *MockTaskIteratorMockRecorder) PageInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageInfo", reflect.TypeOf((*MockTaskIterator)(nil).PageInfo))
}
